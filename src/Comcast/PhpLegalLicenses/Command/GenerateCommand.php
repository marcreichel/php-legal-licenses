<?php

declare(strict_types=1);

namespace Comcast\PhpLegalLicenses\Console;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class GenerateCommand extends DependencyLicenseCommand
{
    private bool $hideVersion = false;

    /**
     * Configure the command options.
     */
    final protected function configure(): void
    {
        $this
            ->setName('generate')
            ->setDescription('Generate Licenses file from project dependencies.')
            ->addOption('hide-version', 'hv', InputOption::VALUE_NONE, 'Hide dependency version')
            ->addOption('csv', null, InputOption::VALUE_NONE, 'Output csv format');
    }

    /**
     * Execute the command.
     */
    final protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->hideVersion = $input->getOption('hide-version');
        $toCsv = $input->getOption('csv');
        $dependencies = $this->getDependencyList();

        $output->writeln('<info>Generating Licenses file...</info>');
        if ($toCsv) {

            $this->generateLicensesCSV($dependencies);
        } else {

            $this->generateLicensesText($dependencies);
        }
        $output->writeln('<info>Done!</info>');

        return self::SUCCESS;
    }

    /**
     * Generates Licenses Text using packages retrieved from <code>composer.lock</code> file.
     */
    final protected function generateLicensesText(array $dependencies): void
    {
        $text = $this->getBoilerplate();

        foreach ($dependencies as $dependency) {
            $text .= $this->getTextForDependency($dependency);
        }

        file_put_contents('licenses.md', $text);
    }

    final protected function generateLicensesCSV(array $dependencies): void
    {
        $fp = fopen('licenses.csv', 'wb');
        $title = ['name', 'version', 'source', 'license description'];

        fputcsv($fp, $title);
        foreach ($dependencies as $dependency) {
            $dependencyLists = [
                $dependency['name'],
                $this->hideVersion ? '' : $dependency['version'],
                $dependency['source']['url'],
                $this->getTextForDependency($dependency),
            ];
            fputcsv($fp, $dependencyLists);
        }
        fclose($fp);
    }

    /**
     * Returns Boilerplate text for the Licences File.
     */
    final protected function getBoilerplate(): string
    {
        return '# Project Licenses
This file was generated by the [PHP Legal Licenses](https://github.com/Comcast/php-legal-licenses) utility. It contains the name, version and commit sha, description, homepage, and license information for every dependency in this project.

## Dependencies

';
    }

    /**
     * Retrieves text containing version, sha, and license information for the specified dependency.
     */
    final protected function getTextForDependency(array $dependency): string
    {
        $name = $dependency['name'];
        $description = $dependency['description'] ?? 'Not configured.';
        $version = $dependency['version'];
        $homepage = $dependency['homepage'] ?? 'Not configured.';
        $sha = isset($dependency['source']) ? str_split($dependency['source']['reference'], 7)[0] : 'no sha';
        $licenseNames = isset($dependency['license']) ? implode(', ', $dependency['license']) : 'Not configured.';
        $license = $this->getFullLicenseText($name);

        return $this->generateDependencyText($name, $description, $version, $homepage, $sha, $licenseNames, $license);
    }

    /**
     * Retrieves full license text for a dependency from the vendor directory.
     */
    final protected function getFullLicenseText(string $name): string
    {
        $path = getcwd()."/vendor/$name/";
        $filenames = ['LICENSE.txt', 'LICENSE.md', 'LICENSE', 'license.txt', 'license.md', 'license', 'LICENSE-2.0.txt'];

        foreach ($filenames as $filename) {
            $text = @file_get_contents($path.$filename);
            if ($text) {
                return $text;
            }
        }

        return 'Full license text not found in dependency source.';
    }

    /**
     * Generates Dependency Text based on boilerplate.
     */
    final protected function generateDependencyText(string $name, string $description, string $version, string $homepage, string $sha, string $licenseNames, string $license): string
    {
        return "### $name ".($this->hideVersion ? '' : "(Version $version | $sha)")."
$description
Homepage: $homepage
Licenses Used: $licenseNames
$license

";
    }
}
